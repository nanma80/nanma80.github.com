Hi Scott,

Thanks again for organizing the party!

In that party I raised the question about a 4D Zome. A good analogy of the 3D Zome model is to use a 120-cell shaped 4-ball as a node, allowing struts coming out from the directions of cell centers, face centers, edge centers or vertices. We asked the question: in order to build a 120-cell using this kind of balls, what type of struts do we need?

I thought about this problem later. As opposed to 3D where we can only use blue struts (edge type) to build a dodecahedron, in 4D, we can use at least two types of struts: cell-centers or vertices.

Specifically, if we use the coordinates here:

http://en.wikipedia.org/wiki/120-cell#Cartesian_coordinates

to describe the vertices of a ball, we can place a ball at (a, 0, 0, 0) for some large enough a, and put vertex-type struts in the four vertices holes facing (-phi^2, phi, phi, phi), (-phi^2, phi, -phi, -phi), (-phi^2, -phi, phi, -phi), and (-phi^2, -phi, -phi, phi). This way we can build a 120-cell using vertex (yellow?) struts.

Alternatively, we can place a ball at (a, a, 0, 0) for some large enough a, and put cell-type struts in the four cell holes facing (1/phi, -1, phi, 0)/2, (1/phi, -1, -phi, 0)/2, (-1, 1/phi, 0, phi)/2, and (-1, 1/phi, 0, -phi)/2. This way we can build a 120-cell using cell struts (hyper red?).

I checked the coordinates of edges and faces and struts from there seem not to be able to used to construct a 120-cell.

Nan

Similarly, we can use the same balls to make a 600-cell using two types of struts.

We can place a ball at (a, 0, 0, 0) for some large enough a, and put cell-type struts in twelve holes facing (-1/phi, 1, phi, 0)/2, (-1/phi, 0, 1, phi)/2, and (-1/phi, phi, 0, 1)/2 with plus or minus signs in front of 1 and phi.

We can place a ball at (a, a, 0, 0) for large enough a, and put vertex-type struts in twelve holes facing the following directions:
(1, -sqrt(5), -1, 1)
(1, -sqrt(5), 1, -1)
(-sqrt(5), 1, -1, 1)
(-sqrt(5), 1, 1, -1)
(-phi, 1/phi^2, -phi, -phi)
(-phi, 1/phi^2, phi, phi)
(1/phi^2, -phi, -phi, -phi)
(1/phi^2, -phi, phi, phi)
(-1/phi, -1/phi, -1/phi, phi^2)
(-1/phi, -1/phi, 1/phi, -phi^2)
(-1/phi, -1/phi, -phi^2, 1/phi)
(-1/phi, -1/phi, phi^2, -1/phi)

In conclusion if we have 4D Zome we can use two types of struts to make the 120-cell and the 600-cell.

Nan

Scott,

Let me explain it more. When we use the 4D Zome balls to construct an edge-frame of a 120-cell, we are talking about two levels of 120-cell. Each 4D ball is a small 120-cell, and the whole 120-cell is a larger one. The orientations of the two levels may or may not match.

We can find the vertex of a 120-cell in the wikipedia page. 

http://en.wikipedia.org/wiki/120-cell#Cartesian_coordinates

Let's call the orientation of 120-cell Orientation-1. This is only one out of infinitely many orientations.

Let's construct another orientation by applying the mapping
(x1, x2, x3, x4) -> ((x1+x2)/4, (x1-x2)/4, (x3+x4)/4, (x3-x4)/4)
This is a rotation followed by normalization (so that the norm is changed from 2*sqrt(2) to 1). After this transform, the vertices are located at:

(1, 0, 0, 0), 

Let's assume that the vertex coordinates of the small balls follow those values, except that we move each ball to a different position. 




Let's find the centers of each ball by placing a ball at (a,0,0,0). It turns out we can't just scale the vertex coordinates in the wiki page to get a vertex at (a,0,0,0). 



When the vertices are like that, the coordinates of the cell centers are all permutations of (1/2, 1/2, 1/2, 1/2), (1,0,0,0), and even permutations of (phi, 1, 0, 1/phi) where each number can be positive or negative.








